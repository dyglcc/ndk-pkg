name: publish ndk-pkg bundle

on:
  workflow_dispatch:

jobs:

  prepare:
    runs-on: ubuntu-latest

    steps:
      - id:  prepare
        run: |
          printf 'UTS=%s\n' "$(date -u +%Y.%m.%d)" >> "$GITHUB_OUTPUT"

    outputs:
      uts: ${{ steps.prepare.outputs.UTS }}


  macos:
    needs: prepare

    runs-on: macos-12

    strategy:
      fail-fast: false
      matrix:
        target-version: ['11.0', '12.0', '13.0']
        target-arch: [x86_64, arm64]

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/xcpkg/master/xcpkg
      - run: chmod a+x xcpkg
      - run: ./xcpkg setup
      - run: ./xcpkg update

      - run: ./xcpkg install uppm      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install bash      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install coreutils --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install findutils --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install easyutils --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install gawk      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install gsed      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install grep      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install gtar      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install gzip      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install lzip      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install unzip     --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install zip       --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install xz        --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install bzip2     --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install jq        --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install yq        --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install git       --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install curl      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install tree      --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install patchelf  --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install figlet    --link-type=static-prefered --install-lib=static
      - run: ./xcpkg install lolcat    --link-type=static-prefered --install-lib=static

      - run: install -d out/libexec

      - run: cp -r -v ~/.xcpkg/installed/uppm/*      out/
      - run: cp -r -v ~/.xcpkg/installed/bash/*      out/
      - run: cp -r -v ~/.xcpkg/installed/coreutils/* out/
      - run: cp -r -v ~/.xcpkg/installed/findutils/* out/
      - run: cp -r -v ~/.xcpkg/installed/easyutils/* out/
      - run: cp -r -v ~/.xcpkg/installed/gawk/*      out/
      - run: cp -r -v ~/.xcpkg/installed/gsed/*      out/
      - run: cp -r -v ~/.xcpkg/installed/grep/*      out/
      - run: cp -r -v ~/.xcpkg/installed/gtar/*      out/
      - run: cp -r -v ~/.xcpkg/installed/gzip/*      out/
      - run: cp -r -v ~/.xcpkg/installed/lzip/*      out/
      - run: cp -r -v ~/.xcpkg/installed/unzip/*     out/
      - run: cp -r -v ~/.xcpkg/installed/zip/*       out/
      - run: cp -r -v ~/.xcpkg/installed/xz/*        out/
      - run: cp -r -v ~/.xcpkg/installed/bzip2/*     out/
      - run: cp -r -v ~/.xcpkg/installed/jq/*        out/
      - run: cp -r -v ~/.xcpkg/installed/yq/*        out/
      - run: cp -r -v ~/.xcpkg/installed/git/*       out/
      - run: cp -r -v ~/.xcpkg/installed/curl/*      out/
      - run: cp -r -v ~/.xcpkg/installed/tree/*      out/
      - run: cp -r -v ~/.xcpkg/installed/patchelf/*  out/
      - run: cp -r -v ~/.xcpkg/installed/figlet/*    out/
      - run: cp -r -v ~/.xcpkg/installed/lolcat/*    out/

      - run: cc -o out/libexec/wrapper-native-cc  wrapper-native-cc.c
      - run: cc -o out/libexec/wrapper-native-c++ wrapper-native-c++.c
      - run: cc -o out/libexec/wrapper-target-cc  wrapper-native-cc.c
      - run: cc -o out/libexec/wrapper-target-c++ wrapper-native-c++.c

      - run: mv -v ndk-pkg out/bin/
      - run: install -d -v out/share/zsh/vendor-completions
      - run: mv -v ndk-pkg-zsh-completion share/zsh/vendor-completions/

      - run: |
          DIRNAME="ndk-pkg-bundle-${{ needs.prepare.outputs.UTS }}-macos${{ matrix.target-version }}-${{ matrix.target-arch }}"
          mv out "$DIRNAME"
          tar cJvf "$DIRNAME.tar.xz" "$DIRNAME"

      - uses: actions/upload-artifact@v3
        with:
          name: ndk-pkg-bundle-macos${{ matrix.target-version }}-${{ matrix.target-arch }}-tar-xz
          path: ndk-pkg-bundle-*.tar.xz


  linux:
    needs: [prepare, macos]

    runs-on: ubuntu-latest

    container: alpine:3.16

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v3

      - run: apt -y update
      - run: apt -y install curl xz-utils g++ gfortran linux-headers-generic

      - run: curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/bin/ppkg
      - run: chmod a+x ppkg
      - run: ./ppkg setup
      - run: ./ppkg update

      - run: ./ppkg install uppm      --link-type=static-only --install-lib=static
      - run: ./ppkg install bash      --link-type=static-only --install-lib=static
      - run: ./ppkg install coreutils --link-type=static-only --install-lib=static
      - run: ./ppkg install findutils --link-type=static-only --install-lib=static
      - run: ./ppkg install easyutils --link-type=static-only --install-lib=static
      - run: ./ppkg install gawk      --link-type=static-only --install-lib=static
      - run: ./ppkg install gsed      --link-type=static-only --install-lib=static
      - run: ./ppkg install grep      --link-type=static-only --install-lib=static
      - run: ./ppkg install gtar      --link-type=static-only --install-lib=static
      - run: ./ppkg install gzip      --link-type=static-only --install-lib=static
      - run: ./ppkg install lzip      --link-type=static-only --install-lib=static
      - run: ./ppkg install unzip     --link-type=static-only --install-lib=static
      - run: ./ppkg install zip       --link-type=static-only --install-lib=static
      - run: ./ppkg install xz        --link-type=static-only --install-lib=static
      - run: ./ppkg install bzip2     --link-type=static-only --install-lib=static
      - run: ./ppkg install jq        --link-type=static-only --install-lib=static
      - run: ./ppkg install yq        --link-type=static-only --install-lib=static
      - run: ./ppkg install git       --link-type=static-only --install-lib=static
      - run: ./ppkg install curl      --link-type=static-only --install-lib=static
      - run: ./ppkg install tree      --link-type=static-only --install-lib=static
      - run: ./ppkg install patchelf  --link-type=static-only --install-lib=static
      - run: ./ppkg install figlet    --link-type=static-only --install-lib=static
      - run: ./ppkg install lolcat    --link-type=static-only --install-lib=static

      - run: install -d out/libexec

      - run: cp -r -v ~/.ppkg/installed/uppm/*      out/
      - run: cp -r -v ~/.ppkg/installed/bash/*      out/
      - run: cp -r -v ~/.ppkg/installed/coreutils/* out/
      - run: cp -r -v ~/.ppkg/installed/findutils/* out/
      - run: cp -r -v ~/.ppkg/installed/easyutils/* out/
      - run: cp -r -v ~/.ppkg/installed/gawk/*      out/
      - run: cp -r -v ~/.ppkg/installed/gsed/*      out/
      - run: cp -r -v ~/.ppkg/installed/grep/*      out/
      - run: cp -r -v ~/.ppkg/installed/gtar/*      out/
      - run: cp -r -v ~/.ppkg/installed/gzip/*      out/
      - run: cp -r -v ~/.ppkg/installed/lzip/*      out/
      - run: cp -r -v ~/.ppkg/installed/unzip/*     out/
      - run: cp -r -v ~/.ppkg/installed/zip/*       out/
      - run: cp -r -v ~/.ppkg/installed/xz/*        out/
      - run: cp -r -v ~/.ppkg/installed/bzip2/*     out/
      - run: cp -r -v ~/.ppkg/installed/jq/*        out/
      - run: cp -r -v ~/.ppkg/installed/yq/*        out/
      - run: cp -r -v ~/.ppkg/installed/git/*       out/
      - run: cp -r -v ~/.ppkg/installed/curl/*      out/
      - run: cp -r -v ~/.ppkg/installed/tree/*      out/
      - run: cp -r -v ~/.ppkg/installed/patchelf/*  out/
      - run: cp -r -v ~/.ppkg/installed/figlet/*    out/
      - run: cp -r -v ~/.ppkg/installed/lolcat/*    out/

      - run: cc -static -o out/libexec/wrapper-native-cc  wrapper-native-cc.c
      - run: cc -static -o out/libexec/wrapper-native-c++ wrapper-native-c++.c
      - run: cc -static -o out/libexec/wrapper-target-cc  wrapper-native-cc.c
      - run: cc -static -o out/libexec/wrapper-target-c++ wrapper-native-c++.c

      - run: mv -v ndk-pkg out/bin/
      - run: install -d -v out/share/zsh/vendor-completions
      - run: mv -v ndk-pkg-zsh-completion share/zsh/vendor-completions/

      - run: |
          DIRNAME="ndk-pkg-bundle-${{ needs.prepare.outputs.UTS }}-linux-x86_64"
          mv out "$DIRNAME"
          tar cJvf "$DIRNAME.tar.xz" "$DIRNAME"

      - uses: actions/upload-artifact@v3
        with:
          name: ndk-pkg-bundle-linux-x86_64-tar-xz
          path: ndk-pkg-bundle-*.tar.xz


  publish:
    needs: [prepare, linux]

    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ndk-pkg-bundle---macos11.0-x86_64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: ndk-pkg-bundle---macos12.0-x86_64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: ndk-pkg-bundle---macos13.0-x86_64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: ndk-pkg-bundle---macos11.0-arm64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: ndk-pkg-bundle---macos12.0-arm64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: ndk-pkg-bundle---macos13.0-arm64-tar-xz
          path: .

     - uses: actions/download-artifact@v3
        with:
          name: ndk-pkg-bundle---linux-x86_64-tar-xz
          path: .

      - run: ls -a

      - run: |
          # to avaid: failed to run git: fatal: not a git repository (or any of the parent directories): .git
          git -c init.defaultBranch=master init
          git remote add origin ${{ github.repositoryUrl }}

          SHA256SUM="$(sha256sum ndk-pkg-bundle-*.tar.xz)"

          cat > notes.md <<EOF
          sha256sum:

          \`\`\`
          $SHA256SUM
          \`\`\`
          EOF

          gh release create bundle-${{ needs.prepare.outputs.UTS }} ndk-pkg-bundle-*.tar.xz --title bundle-${{ needs.prepare.outputs.UTS }} --notes-file notes.md
